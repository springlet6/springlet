package ${package.Controller};


import org.springframework.web.bind.annotation.RequestMapping;

#if(${restControllerStyle})
import org.springframework.web.bind.annotation.RestController;
#else
import org.springframework.stereotype.Controller;
#end
#if(${superControllerClassPackage})
import ${superControllerClassPackage};
#end
import lombok.AllArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import ${package.Service}.${table.serviceName};
import ${VoPackage}.${vo};
import ${DtoPackage}.${dto};
import ${queryPackage}.${query};
import ${package.Entity}.${entity};
import org.springframework.web.bind.annotation.*;
import org.springframework.validation.annotation.Validated;
import com.baomidou.mybatisplus.core.toolkit.Wrappers;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import cn.springlet.core.util.BeanUtil;
import cn.springlet.core.bean.page.PageInfo ;
import cn.springlet.core.bean.web.HttpResult ;
import cn.springlet.mybatisplus.page.PageResult ;
import cn.springlet.mybatisplus.page.PageUtil;
import cn.springlet.log.annotation.PrintAspectLog;

import java.util.List;
import java.util.Objects;
import cn.hutool.core.collection.CollUtil;

/**
 * <p>
 * $!{table.comment} controller
 * </p>
 *
 * @author ${author}
 * @since ${date}
 */
@Slf4j
#if(${restControllerStyle})
@RestController
#else
@Controller
#end
@AllArgsConstructor
@RequestMapping("/${controllerMapping}")
#if(${kotlin})
class ${table.controllerName}#if(${superControllerClass}) : ${superControllerClass}()#end

#else
#if(${superControllerClass})
@Api(tags = "$!{table.comment}")
public class ${table.controllerName} extends ${superControllerClass} {
#else
@Api(tags = "$!{table.comment}")
public class ${table.controllerName} {
#end

    private final ${table.serviceName} ${servicename};

    @PostMapping("/page_list")
    @ApiOperation("$!{table.comment} 分页列表")
    public HttpResult<PageInfo<${vo}>> pageList(@RequestBody @Validated ${query} query) {
            String keys =query.keysTrim();

            Page<${entity}> doPage = ${servicename}.page(PageUtil.getMpPage(query), Wrappers.<${entity}>lambdaQuery()
            .orderByDesc(${entity}::getGmtCreate)
            .orderByDesc(${entity}::${getPK}));

            List<${vo}> vos = BeanUtil.copyList(doPage.getRecords(), ${vo}.class);
            return PageResult.httpSuccess(doPage, vos);
}

    @Transactional
    @PostMapping("/save_or_update")
    @PrintAspectLog("$!{table.comment}-新增或修改")
    @ApiOperation("$!{table.comment}-新增或修改")
    public HttpResult<${vo}> addOrUpdate(@RequestBody @Validated ${dto} dto) {

            ${entity} entity = BeanUtil.toBean(dto, ${entity}.class);

            if (entity.${getPK}() == null) {
            //add
            log.info("$!{table.comment}-新增");
            entity.insert();
            return HttpResult.success(BeanUtil.toBean(entity, ${vo}.class));
            }else{
        //update
        log.info("$!{table.comment}-修改");
        entity.update(Wrappers.<${entity}>lambdaUpdate()
        //加上数据权限条件 比如用户编号
        .eq(${entity}::${getPK}, entity.${getPK}()));
        }

            return HttpResult.success(BeanUtil.toBean(entity, ${vo}.class));
}

    @Transactional
    @PostMapping("/delete")
    @PrintAspectLog("$!{table.comment}-删除")
    @ApiOperation("$!{table.comment}-删除")
    public HttpResult delete(@RequestBody @Validated ${dto} dto) {
            if (Objects.isNull(dto.${getPK}()) && CollUtil.isEmpty(dto.${getPK}List())) {
            return HttpResult.error("未指定删除条件");
            }
            ${servicename}.remove(Wrappers.<${entity}>lambdaQuery()
            //加上数据权限条件 比如用户编号
            .eq(Objects.nonNull(dto.${getPK}()), ${entity}::${getPK}, dto.${getPK}())
            .in(CollUtil.isNotEmpty(dto.${getPK}List()), ${entity}::${getPK}, dto.${getPK}List()));
            return HttpResult.success();
}
}

#end